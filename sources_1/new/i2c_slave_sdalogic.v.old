`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/10/2022 04:42:47 PM
// Design Name: 
// Module Name: i2c_slave_sdalogic
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module i2c_slave_sdalogic #(parameter ID = 7'b0000010 )(
    inout SDA,
    output [6:0] addr,
    output [7:0]data,
    input sda_clk,
    input reset,
    input [2:0]state
    );
    
    parameter STATE_IDLE =3'd0;
    parameter STATE_START =3'd1; 
    parameter STATE_ADDR=3'd2;
    parameter STATE_RW=3'd3;
    parameter STATE_ACK=3'd4;
    parameter STATE_MEM=3'd5;
    parameter STATE_DATA=3'd6; 
    parameter STATE_STOP=3'd7;
    
    reg [6:0] buf_addr;
    reg [7:0] buf_mem;
    reg [7:0] buf_data;
    reg bsda;
    reg rw;
    
    assign SDA = bsda;
    assign addr = (state == STATE_ACK) ? buf_mem : 0;
    assign data = (state == STATE_ACK) ? buf_data : 0;

    always@ (posedge sda_clk, posedge reset) begin
        if (reset)
            bsda <= 1'bz;
        else begin
            case (state)
                STATE_IDLE: begin
                    bsda <= 1'bz;
                end
                
                STATE_START: begin
                    bsda <= 1'bz;
                end
                
                STATE_ADDR: begin
                    bsda <= 1'bz;
                end
                
                STATE_RW: begin
                    bsda <= 1'bz;
                end
                
                STATE_ACK: begin
                    if (buf_addr == ID)
                        bsda <= 1'b1;
                    else
                        bsda <= 1'b0;
                end
                
                STATE_MEM: begin
                    bsda <= 1'bz;
                end
                
                STATE_DATA: begin
                    if (ID)
                        if (~rw) begin //write to master
                            bsda <= 1'bz;
                        end
                        else begin
                            bsda <= buf_data[7];
                        end
                    else
                        bsda <= 1'bz;
                end
                
                STATE_STOP: begin
                    bsda <= 1'bz;
                end
                
                default: bsda <= 1'bz;
            endcase
        end
    end

    always@ (posedge sda_clk, posedge reset) begin
        if (reset) begin
            rw <= 0;
        end
        else begin
            if (state == STATE_RW) begin
                rw <= SDA;
            end
        end
    end
    
    always@ (posedge sda_clk, posedge reset) begin
        if (reset) begin
            buf_addr <= 0;
        end
        else begin
            if (state == STATE_ADDR) begin
                buf_addr <= {buf_addr[5:0], SDA};
            end
        end
    end
    
    always@ (posedge sda_clk, posedge reset) begin
        if (reset) begin
            buf_mem <= 0;
        end
        else begin
            if (state == STATE_MEM) begin
                if (buf_addr == ID) begin
                    buf_mem <= {buf_mem[6:0], SDA};
                end
                else begin
                    buf_mem <= 0;
                end
            end
        end
    end
    
    always@ (posedge sda_clk, posedge reset) begin
        if (reset) begin
            buf_data <= 0;
        end
        else begin
            if (state == STATE_DATA) begin
                if (buf_addr == ID) begin
                    if (~rw) begin
                        buf_data <= {buf_data[6:0], SDA};
                    end
                    else begin
                        buf_data <= {buf_data[6:0], 1'b0};
                    end
                end
                else begin
                    buf_data <= 1'b0;
                end
            end
        end
    end
endmodule
